function externalControl
global u;
u = udpport("byte");
d1 = 340;
d3 = 400;
d5 = 400;
d7 =126;
% gohome;
ptp([-60,60,0,-80,0,-65,0]/180*pi);

% moveTo([-60, 75, 0]/180*pi, [407.2631, -705.4012, 372.6106]', [1,-1,-1]);
lineTo([-700,0,0]');

function lineTo(t, R, vel)
if nargin < 3
    vel = 200;
end
if nargin < 2
    R = eye(3);
end
start = queryJoints;
kesai = cal_kuka_kesai(start);
cfg=[sign(start(2)),sign(start(4)),sign(start(6))];
Ts = forward_kin_kuka(start);
Te = Ts*[R,t;0 0 0 1];
T = norm(t) / vel;
Freq = 200;
r = rateControl(Freq);
numSamples = round(T * Freq) + 1;
[s,sd,sdd] = trapveltraj([0, 1],numSamples, 'EndTime', T);
tSamples = linspace(0,T,numSamples);
[tforms,vel,acc] = transformtraj(Ts,Te,[0 T],tSamples, 'TimeScaling', [s;sd;sdd]);
S = [0, 0, 1, 0, 0, 0;
    0, 1, 0, -d1, 0, 0;
    0, 0, 1, 0, 0, 0;
    0, -1, 0, d1 + d3, 0, 0;
    0, 0, 1, 0, 0, 0;
     0, 1, 0, -(d1+d3+d5), 0, 0;
     0, 0, 1, 0, 0, 0];
% plot(tSamples, reshape(tforms(1,4,:),[1, numSamples]));
oldang = [];
curJt = start;
for i = 1 : numSamples
    
    w = vel(1:3,i);
    v = vel(4:6, i);
    R = tforms(1:3,1:3, i);
    t = tforms(1:3,4, i);
    v = cross(w,-t) + v;
    Js = jacobian(S, CurJt, 's');
    oldkesai = kesai;
    [~, bd, ~] = inverse_kin_kuka(tforms(1:3,1:3, i), tforms(1:3,4, i), cfg);
    flag = 0;
    if ~isempty(bd)
        [flag, a, b] = isInRange(bd, oldkesai);
        if flag == 1
            kesai = adjust_kesai(a, b, oldkesai);
            angles = inverse_kin_kuka_kesai(tforms(1:3,1:3, i), tforms(1:3,4, i), cfg, kesai);
        end
    end
    if flag == 0 || (~isempty(oldang) && norm(angles-oldang)>0.1)
        for cfg1 = -1 : 2 : 1
            for cfg2 =  -1 : 2 : 1
                for cfg3 = -1 : 2 : 1
                    cfg = [cfg1, cfg2, cfg3];
                    [~, bd, ~] = inverse_kin_kuka(tforms(1:3,1:3, i), tforms(1:3,4, i), cfg);
                    [flag, a, b] = isInRange(bd, oldkesai);
                    if flag == 1
                        kesai = adjust_kesai(a, b, oldkesai);
                        angles = inverse_kin_kuka_kesai(tforms(1:3,1:3, i), tforms(1:3,4, i), cfg, kesai);
                        if ~isempty(oldang) && norm(angles-oldang)<0.1
                            break;
                        else
                            flag = 0;
                        end
                    end
                end
                if flag == 1
                    break;
                end
            end
            if flag == 1
                break;
            end
        end
    end
    if flag == 0
        error('no solution');
    end
    setJoints(angles);
    oldang = angles;
    waitfor(r);
end



function moveTo(abc, t, cfg)
[angles, ~, ~] = inverse_kin_kuka(EulZYX2R(abc), t, cfg);
if ~isempty(angles)
    ptp(angles);
end

function ptp(jts, vel)
if nargin < 2
    vel = .4;
end
start = queryJoints;
wayPoints = [start',jts'];
Freq = 200;
r = rateControl(Freq);
T = max((jts - start) / vel);
numSamples = round(T * Freq) + 1;
[q,qd,qdd,tSamples,pp] = trapveltraj(wayPoints,numSamples);
for i = 1 : numSamples
    setJoints(q(:,i));
    waitfor(r);
end

function joints = queryJoints
global u;
writeline(u,"query;","127.0.0.1",7755);
s = readline(u);
joints = sscanf(s,'%f;%f;%f;%f;%f;%f;%f')';

function gohome
ptp([0,0,0,0,0,0,0]);

function setJoints(jt)
global u;
cmd = sprintf('%f;%f;%f;%f;%f;%f;%f;', jt(1), jt(2), jt(3), jt(4), jt(5)...
    ,jt(6), jt(7));
writeline(u,cmd,"127.0.0.1",7755);
